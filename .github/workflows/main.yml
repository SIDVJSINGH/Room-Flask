name: Terraform GCP-GKE
on:
  push:
    branches: [main]
  workflow_dispatch:
jobs:
  create-gke:
    name: GKE Infrastructure Provising
    runs-on: ubuntu-latest
    needs: []
    env:
      PROJECT_ID: stp-7thsem
      ZONE: us-central1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setting up GCP with Service Account
      - uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          version: latest # Version of Gcloud SDK to install.
          service_account_key: ${{ secrets.GCLOUD_CREDENTIALS }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true
          # credentials_file_path: ${{ secrets.GCLOUD_CREDENTIALS }} # Credentials will be written to this file

      # Terraform initializer
      - name: Terraform initialize
        working-directory: ./GKE-Terraform
        run: terraform init

      # Terraform Plan for changes
      - name: Terraform plan
        working-directory: ./GKE-Terraform
        run: terraform plan -out=tfplan.out

      # Terraform Apply the changes
      - name: Terraform apply
        working-directory: ./GKE-Terraform
        run: terraform apply --auto-approve

      - name: Sleep for a while after that
        run: sleep 60

  login_gke:
    name: Login to GKE
    runs-on: ubuntu-latest
    needs: [create-gke]
    env:
      PROJECT_ID: stp-7thsem
      ZONE: us-central1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setting up GCP with Service Account
      - uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          version: latest # Version of Gcloud SDK to install.
          service_account_key: ${{ secrets.GCLOUD_CREDENTIALS }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true
          # credentials_file_path: ${{ secrets.GCLOUD_CREDENTIALS }} # Credentials will be written to this file

      # Install Kubectl for running the Application
      - name: Install Kubectl
        run: |
          gcloud components install kubectl

      # Application manifest to run the chatroom application
      - name: Connect GKE and Run the Manifests
        working-directory: ./chatroom-manifest
        run: |
          bash chat.sh

  serviceIP:
    name: External IP
    runs-on: ubuntu-latest
    needs: [login_gke]
    env:
      PROJECT_ID: stp-7thsem
      ZONE: us-central1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setting up GCP with Service Account
      - uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          version: latest # Version of Gcloud SDK to install.
          service_account_key: ${{ secrets.GCLOUD_CREDENTIALS }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true
          # credentials_file_path: ${{ secrets.GCLOUD_CREDENTIALS }} # Credentials will be written to this file

      - name: Install Kubectl
        run: gcloud components install kubectl

      - name: Connect to GKE cluster
        run: gcloud container clusters get-credentials primary --zone ${{env.ZONE}} --project ${{env.PROJECT_ID}}

      # Expose the Service with External IP
      - name: Get the SVC IP
        run: kubectl get svc -n chatroom

  # Destroy the Infrastructure
  destroy-gke:
    name: Destroy Infrastrucure
    runs-on: ubuntu-latest
    needs: [create-gke, login_gke, serviceIP]
    # needs: [login_gke] # Parallel Jobs
    env:
      PROJECT_ID: stp-7thsem
      ZONE: us-central1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setting up GCP with Service Account
      - uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          version: latest # Version of Gcloud SDK to install.
          service_account_key: ${{ secrets.GCLOUD_CREDENTIALS }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true
      # credentials_file_path: ${{ secrets.GCLOUD_CREDENTIALS }} # Credentials will be written to this file

      # Terraform initializer
      - name: Terraform initialize
        working-directory: ./GKE-Terraform
        run: terraform init

      # Terraform Destroy Infrastructure
      - name: Terraform Destroy
        working-directory: ./GKE-Terraform
        run: terraform destroy --auto-approve
